// Created by Microsoft (R) C/C++ Compiler Version 12.00.8141.0 (731f97cf).
//
// ATLInternals.tli
//
// Wrapper implementations for Win32 type library ../Debug/ATLInternals.dll
// compiler-generated file created 07/18/98 at 12:53:45 - DO NOT EDIT!

#pragma once

//
// dispinterface _IClimbableObjectEvents wrapper method implementations
//

inline HRESULT _IClimbableObjectEvents::OnClimb ( VARIANT_BOOL fClimbUp, IUnknown * pClimber ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000b\x000d", fClimbUp, pClimber);
}

//
// dispinterface _ISpeakerEvents wrapper method implementations
//

inline HRESULT _ISpeakerEvents::OnWhisper ( _bstr_t bstrSpeach ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)bstrSpeach);
}

inline HRESULT _ISpeakerEvents::OnTalk ( _bstr_t bstrSpeach ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)bstrSpeach);
}

inline HRESULT _ISpeakerEvents::OnYell ( _bstr_t bstrSpeach ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)bstrSpeach);
}

//
// interface ISpeaker wrapper method implementations
//

inline long ISpeaker::GetVolume ( ) {
    long _result;
    HRESULT _hr = get_Volume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpeaker::PutVolume ( long pVal ) {
    HRESULT _hr = put_Volume(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISpeaker::GetSpeech ( ) {
    BSTR _result;
    HRESULT _hr = get_Speech(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISpeaker::PutSpeech ( _bstr_t pVal ) {
    HRESULT _hr = put_Speech(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISpeaker::Speak ( ) {
    HRESULT _hr = raw_Speak();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface INamedObject wrapper method implementations
//

inline _bstr_t INamedObject::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void INamedObject::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IListener wrapper method implementations
//

inline HRESULT IListener::ListenTo ( enum SpeakerRole role, IUnknown * pSpeaker ) {
    HRESULT _hr = raw_ListenTo(role, pSpeaker);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IListener::StopListening ( enum SpeakerRole role ) {
    HRESULT _hr = raw_StopListening(role);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IClimbableObject wrapper method implementations
//

inline HRESULT IClimbableObject::ClimbOn ( IUnknown * pClimber ) {
    HRESULT _hr = raw_ClimbOn(pClimber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IClimbableObject::ClimbOff ( ) {
    HRESULT _hr = raw_ClimbOff();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
